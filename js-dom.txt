- al ir a la consola de la herramienta del desarrollador web podemos
  escribir document y se genera un objeto document que contiene
  todo el codigo html
> document

- podemos seleccionar una etiqueta del document
> document.querySelector("nombreEtiqueta/.clase/id")

- si quisieramos cambiar algun texto dentro de un etiqueta span
  textContent es una propiedad de la etiqueta span
> document.querySelector("span").textContent = "TextoNuevo"

-DOM (Document objet Model)
 todo el codigo html se representa como un objeto tipo document
 el cual reside en el objeto Window(pestañana del navegador)

 Window -> Document -> <html> -> <head>  -> <title>
                              -> <body>  -> <div>
					 -> <ul>

 lo anterior se conoce como arbol DOM

- podemos utilizar otros metodos, ademas de query selector, para 
  recorrer el arbol DOM
> document.getElementById('id') -> selec ele por ID
> document.getElementsByTagName ('tag') retorna un arreglo de ele por tag
> document.querySelectorAll("selector") retorna todos los eles con el 
   					mismo nombre
- data attributes -> permite deifinir datos personalizados asociados a
  eles DOM
>data-nameElegido -> dentro de la etiqueta html

- para usar dentro del js script
> document.querySelector("[data-name]")
 
- agregar un listener(captador de eventos)
> btn.addEventeListener('eventoDeseado',function())

- para utilizar un listener, necesitamos:
  evento/elemento sobre el que se realiza el evento/ lo que se ejecutara
  cuando el evento suceda

- capturar el contenido de un input con el la propied value
> document.querySelector("[data-form-input]").value

- asociar la captura del value cuando se pulse el boton
> btn.addEventeListener('eventoDeseado',function(){
	const input = document.querySelector("[data-form-input]").value;})

- podemos cargar en pantalla lo que tiene input
> btn.addEventeListener('eventoDeseado',function(){
	const input = document.querySelector("[data-form-input]").value;
	console.log(value.input);
});

- podemos definir un parametro que se la pase a la funcion cuando se 
  ejecuta el evento ->
> btn.addEventeListener('eventoDeseado',function(evento){
	console.log(evento)
});
 

- en un formulario cada vez que apretamos el boton enviar se recarga la
  pagina. Si queremos evitar esto usamos preventDefault.Al apretar un 
  boton de un formulario la accion por defecto es refrescar la pagina.
  para evitar esto podemos agregar un listener al evento click y añadir
  dentro de la funcion preventDefault
>> btn.addEventeListener('click',function(evento){
	evento.preventDefautl();
});
 
- Arrow functions / funciones lambda
  (parametro) => {cuerpo de la funcion}

- con f-String(template-String) podemos combinar etiquetas html con 
   variables javaScript
>     const contenido =`  <div>
                            <i class="far fa-check-square icon"></i>
                            <span class="task">${valor}</span>
                        </div>
                        <i class="fas fa-trash-alt trashIcon icon"></i>`;

- podemos asignar codigo html a un objeto que contega una etiqueta html
> task = document.querySelector("[data-Name]")
> task.innerHTML = contenido;

- si necesitamos crear nodos(etiquetas) en lugar de unicamente cambiar una
  ya existente
> const task = document.createElement("etiquetaHTML");

- podemos eliminar nodos mediante el metodo .remove
> task.remove()

- podemos crear una clase para el objeto task
> task.classList.add('nombreClase1', 'nombreClase2',...)

- podemos eliminar un clase del objeto tambien 
> task.classList.remove('clase1', ...)

- si necesitamos agregar/quitar dependiendo de si existe o no la clase
>task.classList.toGgle('clase1', ...) // si clase 1 existe la elimina,
				      	caso contrario la coloca

- si necesitamos agregar las etiquetas ya creadas objetoContendor(etiquetaPadre)
> objetoContenedor.appendChild(task)
  appendChild se implementa la final del nodo, para colocar un nodo hijo
  dentro del nodo padre

- existen otros metodos para manipular nodos

> insertBefore (padre,hijo) ->coloca un nodo antes del otro
> replaceChild (ele1,ele2) -> sustituye el nodo del el1 por el nodo del ele2
> removeChild(ele)-> remueve un nodo del arbol 

- IIFE Immediately Invoked function  Expresssion
  para evitar el acceso a las funciones definidas dentro del programa
  podemnos hacer uso del IIFE -> son funciones que se ejecutan tan pronto
  como se definen.
  Se declaran como arrow functions dentro de parentesis

> ( () =>{
     Bloque de codigo
   } ) () // estos ultimso parentesis permiten que sea llamada inmediatamente


- exportar modulos-> al final de cada modulo podemos importar este mediante
> export default nombreModulo.js;

- importar en el modulo donde se utilizara
> import nombreModulo.js(tiene que coincidr con el de export) from
							 "archivo-path"
  dentro del html necesitamos definirle que el script en el cual estamos
  usando los modulos es de type module
<script type ="module" src="path"></script>

!!!!ES NECESARIO TENER LA EXTENSION LIVE SERVER DE VS INSTALADA¡¡¡¡¡
Tambien puedo installar BrowerSync en caso de no utilizar VSC o la extension
Live Server. Una vez instalado vamos al terminal y escribimos
> browser-sync start -s -f . --directory
